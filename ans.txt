// LED Blinking
// void setup() {
//   int ledPin = 7;
//   pinMode(ledPin,OUTPUT);
// }
// void loop() {
//   digitalWrite(ledPin,HIGH);
//   delay(1000);
//   digitalWrite(ledPin,LOW);
//   delay(1000);
// }




// Temperature Sensor
// void setup(){
//     Serial.begin(9600);
// }
// void loop(){
//   int analogValue=analogRead(A0);
//   float millivolts = (analogValue/1024.0) * 3300;
//   float celsius = (millivolts-500)/10;
//   float fahrenheit = ((celsius * 9)/5 + 32);
//   Serial.print("Farenheit = ");
//   Serial.println(fahrenheit);
//   Serial.print("Celisius = ");
//   Serial.println(celsius);
//   delay(1000);
// }



// IR Sensor
// void setup(){
//   int sensorPin = 7;
//   int ledPin = 5;
//   pinMode(sensorPin,INPUT);
//   pinMode(ledPin,OUTPUT);
//   Serial.begin(9600);
// }
// void loop(){
//   int IR_Out = digitalRead(sensorPin);
//   if(IR_Out == HIGH){
//     digitalWrite(ledPin, LOW);
//     Serial.println("Object Not Present");
//   }
//   else {
//     digitalWrite(ledPin, HIGH);
//     Serial.println("Object Present");
//   }
// }




// LDR Sensor
// void setup(){
//   Serial.begin(9600);
// }
// void loop(){
//   int LDR_Out = analogRead(A0);
//   float volt = LDR_Out*3.3/1023; 
//   Serial.println(volt);
//   delay(1000);
// }



// UltraSonic Sensor

const int trigPin = 2; //D4

const int echoPin = 0; //D3 


long duration; 

int distance; 

void setup() 

{ 
pinMode(trigPin, OUTPUT); // Sets the trigPin as an OutputpinMode(echoPin, 

 INPUT); // Sets the echoPin as an Input 

 Serial.begin(9600); 

} 



void loop() 

{ // Clears the trigPin 

 digitalWrite(trigPin, LOW); 

 delayMicroseconds(2); 

 // Sets the trigPin on HIGH state for 10 micro seconds 

 digitalWrite(trigPin, HIGH); 

 delayMicroseconds(10); 

 digitalWrite(trigPin, LOW);
// Reads the echoPin, returns the sound wave travel time in microseconds

 duration = pulseIn(echoPin, HIGH); 

 // Calculating the distance 

 distance = duration*0.034/2; 

 // Prints the distance on the Serial Monitor 

 Serial.print("Distance: "); 

 Serial.println(distance); 

 delay(2000); 

}



// Servo Motor
// #include<Servo.h>
// Servo servo;
//
//
// void setup(){
//   servo.attach(D4);
// }
//
//
// void loop(){
//   for(int i=1;i<180;i++){
//     servo.write(i);
//   }
//   for(int i=180;i>0;i--){
//     servo.write(i);
//   }
// }



// Potentiometer  

#include<Servo.h>
Servo servo;

void setup () 

{ servo.attach(D6); 

 Serial.begin(9600); 

 pinMode(A0, INPUT); 
} 
void loop() 
{ float x = analogRead(A0); 
 x = map(x,0,1023,0,180); 
 servo.write (x); 
 delay(15);

//IOT WITH CLOUD 

#include<ESP8266WiFi.h>

char* SSid = “Moto G82 5G”;

char* Password = “password” void setup()

{ WiFi.begin(SSid, Password);

Serial.begin(115200);

Serial.print(“Connecting: ”);

while (WiFi.status()!= WL_CONNECTED)

{ Serial.print(“Waiting to connect”)

delay(1000);

}

Serial.println(‘\n’);

Serial.println (“Connection established”);

Serial.println (“IP Address\t”);

Serial.println(WiFi.LocalIP());

}



//NODE AS SERVER 

#include <ESP8266WiFi.h>

#include <ESP8266WebServer.h>

/* Put your SSID & Password */

const char* ssid = "Moto G82 5G";
const char* password = "password";
IPAddress local_ip(192,168,1,1);

IPAddress gateway(192,168,1,1);

IPAddress subnet(255,255,255,0);

ESP8266WebServer server(80);

uint8_t LED1pin = D7;

bool LED1status = LOW;

uint8_t LED2pin = D6;

bool LED2status = LOW;

void setup() {

Serial.begin(115200);

pinMode(LED1pin, OUTPUT);

pinMode(LED2pin, OUTPUT);

WiFi.softAP(ssid, password);

WiFi.softAPConfig(local_ip, gateway, subnet);

delay(100);

server.on("/", handle_OnConnect);

server.on("/led1on", handle_led1on);

server.on("/led1off", handle_led1off);

server.on("/led2on", handle_led2on);

server.on("/led2off", handle_led2off);

server.onNotFound(handle_NotFound);

server.begin();

Serial.println("HTTP server started");

}

void loop() {

server.handleClient();

if(LED1status)

{digitalWrite(LED1pin, HIGH);}

else

{digitalWrite(LED1pin, LOW);}

if(LED2status)

{digitalWrite(LED2pin, HIGH);}

else

{digitalWrite(LED2pin, LOW);}

}

void handle_OnConnect() {

LED1status = LOW;

LED2status = LOW;

Serial.println("GPIO7 Status: OFF | GPIO6 Status: OFF");

server.send(200, "text/html", SendHTML(LED1status,LED2status));

}

void handle_led1on() {

LED1status = HIGH;

Serial.println("GPIO7 Status: ON");
server.send(200, "text/html", SendHTML(true,LED2status));

}

void handle_led1off() {

LED1status = LOW;

Serial.println("GPIO7 Status: OFF");

server.send(200, "text/html", SendHTML(false,LED2status));

}

void handle_led2on() {

LED2status = HIGH;

Serial.println("GPIO6 Status: ON");

server.send(200, "text/html", SendHTML(LED1status,true));

}

void handle_led2off() {

LED2status = LOW;

Serial.println("GPIO6 Status: OFF");

server.send(200, "text/html", SendHTML(LED1status,false));

}

void handle_NotFound(){

server.send(404, "text/plain", "Not found");

}

String SendHTML(uint8_t led1stat,uint8_t led2stat){

String ptr = "<!DOCTYPE html> <html>\n";

ptr +="<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user- scalable=no\">\n";

ptr +="<title>LED Control</title>\n";

ptr +="<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}\n";

ptr +="body{margin-top: 50px;} h1 {color: #444444;margin: 50px auto 30px;} h3 {color:

#444444;margin-bottom: 50px;}\n";

ptr +=".button {display: block;width: 80px;background-color: #1abc9c;border: none;color: white;padding:

13px 30px;text-decoration: none;font-size: 25px;margin: 0px auto 35px;cursor: pointer;border-radius:
4px;}\n";

ptr +=".button-on {background-color: #1abc9c;}\n";

ptr +=".button-on:active {background-color: #16a085;}\n";

ptr +=".button-off {background-color: #34495e;}\n";

ptr +=".button-off:active {background-color: #2c3e50;}\n";

ptr +="p {font-size: 14px;color: #888;margin-bottom: 10px;}\n";

ptr +="</style>\n";

ptr +="</head>\n";

ptr +="<body>\n";

ptr +="<h1>ESP8266 Web Server</h1>\n";

ptr +="<h3>Using Access Point(AP) Mode</h3>\n";

if(led1stat)

{ptr +="<p>LED1 Status: ON</p><a class=\"button button-off\" href=\"/led1off\">OFF</a>\n";}

else

{ptr +="<p>LED1 Status: OFF</p><a class=\"button button-on\" href=\"/led1on\">ON</a>\n";}

if(led2stat)

{ptr +="<p>LED2 Status: ON</p><a class=\"button button-off\" href=\"/led2off\">OFF</a>\n";}
else

{ptr +="<p>LED2 Status: OFF</p><a class=\"button button-on\" href=\"/led2on\">ON</a>\n";}

ptr +="</body>\n";

ptr +="</html>\n";

return ptr;

}



